{"version":3,"sources":["components/box.jsx","components/board.jsx","components/message.jsx","components/refresh.jsx","components/game.js","index.js"],"names":["style","border","fontSize","Box","props","name","onClick","value","width","height","margin","display","gridTemplate","Board","Array","map","_","pos","fontWeight","textAlign","Message","Refresh","Game","useState","fill","board","setBoard","isPlayer","setIsPlayer","message","setMessage","boardCopy","lines","i","length","a","b","c","isWon","indexOf","nextPlayer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAGMA,EAAQ,CACZC,OAAQ,kBACRC,SAAU,QAYGC,EAFI,SAACC,GAAD,OAAW,yBAAQC,KAAMD,EAAMC,KAAML,MAAOA,EAAOM,QAASF,EAAME,QAAvD,cAAkEF,EAAMG,MAAxE,SCVxBP,EAAQ,CACZQ,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAaDC,EAPD,SAACT,GAAD,OACZ,qBAAKJ,MAAOA,EAAZ,SACG,YAAIc,MAAM,IAAIC,KAAI,SAACC,EAAGC,GAAJ,OAAY,cAAC,EAAD,CAAeZ,KAAMY,EAAKX,QAAS,kBAAMF,EAAME,QAAQW,IAClDV,MAAOH,EAAMG,MAAMU,IADdA,SChBvCjB,EAAQ,CACZQ,MAAO,QACPE,OAAQ,SACRC,QAAS,OACTT,SAAU,OACVgB,WAAY,MACZC,UAAW,UAKEC,EAFC,SAAChB,GAAD,OAAW,oBAAIC,KAAM,MAAOL,MAAOA,EAAxB,SAAgCI,EAAMG,SCT3DP,EAAQ,CACZQ,MAAO,QACPE,OAAQ,SACRC,QAAS,OACTT,SAAU,OACVgB,WAAY,OAKCG,EAFC,SAACjB,GAAD,OAAW,wBAAQC,KAAM,MAAOL,MAAOA,EAAOM,QAASF,EAAME,QAAlD,SAA4DF,EAAMG,SCoBhFe,EAAO,WAGlB,MAA0BC,mBAAST,MAAM,GAAGU,KAAK,KAAjD,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAAgCH,mBAAS,KAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACA,EAA8BL,mBAAS,kBAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAuCA,OAAQ,gCACN,cAAC,EAAD,CAASvB,MAAOsB,IAChB,cAAC,EAAD,CAAOvB,QAjCW,SAACW,GACnB,GAAiB,KAAbU,GAAkC,KAAfF,EAAMR,GAA7B,CAMA,IAAMc,EAAS,YAAON,GAKtB,GAJAM,EAAUd,GAAOU,EACjBD,EAASK,GAjDC,SAACN,GAeb,IAbA,IAAMO,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAKAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,kBAAgBD,EAAMC,GAAtB,GAAKE,EAAL,KAAQC,EAAR,KAAWC,EAAX,KAEA,GAAiB,KAAbZ,EAAMU,IAAaV,EAAMU,KAAOV,EAAMW,IAAMX,EAAMU,KAAOV,EAAMY,GACjE,OAAO,EAGX,OAAO,EA8BDC,CAAMP,GAKR,OAHAD,EAAW,QAAD,OAASH,SAEnBC,EAAY,IAId,IAA+B,IAA3BG,EAAUQ,QAAQ,IAEpBT,EAAW,QACXF,EAAY,QACP,CACL,IAAIY,EAA2B,MAAbb,EAAoB,IAAM,IAC5CC,EAAYY,GACZV,EAAW,SAAD,OAAUU,OAMOjC,MAAOkB,IACpC,cAAC,EAAD,CAASnB,QAxCK,WACdoB,EAASZ,MAAM,GAAGU,KAAK,KACvBM,EAAW,kBACXF,EAAY,MAqCerB,MAAO,gBC1EtCkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.03434e47.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// just making the border thicker and increasing size of the fonts\r\nconst style = {\r\n  border: \"3px solid black\",\r\n  fontSize: \"40px\",\r\n}\r\n\r\n\r\n/*\r\nBox.jsx is the discrete unit structure of the Board.\r\nIt is made a button.\r\nWhen its pressed it will call the function passed from porps.\r\nIt will display value that is passed from Board\r\n*/\r\nexport const Box = (props) => <button name={props.name} style={style} onClick={props.onClick}> {props.value}  </button>\r\n\r\nexport default Box","import React from 'react'\r\nimport Box from './box'\r\n\r\n\r\n// creating a sqaure box in with grid layout\r\nconst style = {\r\n  width: \"250px\",\r\n  height: \"250px\",\r\n  margin: \"0 auto\",\r\n  display: \"grid\",\r\n  gridTemplate: \"repeat(3, 1fr) / repeat(3, 1fr)\",\r\n};\r\n\r\n// props has 'value' which is a array of 9 charectors that needs to de displayed in box.js\r\n// and a 'onClick' function that needs to be called when button is clicked\r\n// restoring array of box.jsx\r\nconst Board = (props) => (\r\n  <div style={style}>\r\n    {[...Array(9)].map((_, pos) => <Box key={pos} name={pos} onClick={() => props.onClick(pos)}\r\n                                        value={props.value[pos]}/>)}\r\n  </div>\r\n)\r\n\r\nexport default Board","import React from 'react'\r\n\r\nconst style = {\r\n  width: \"300px\",\r\n  margin: \"0 auto\",\r\n  display: \"grid\",\r\n  fontSize: \"40px\",\r\n  fontWeight: \"800\",\r\n  textAlign: 'center'\r\n};\r\n\r\nconst Message = (props) => <h1 name={\"msg\"} style={style}>{props.value}</h1>\r\n\r\nexport default Message","import React from 'react'\r\n\r\nconst style = {\r\n  width: \"250px\",\r\n  margin: \"0 auto\",\r\n  display: \"grid\",\r\n  fontSize: \"40px\",\r\n  fontWeight: \"800\",\r\n};\r\n\r\nconst Refresh = (props) => <button name={\"btn\"} style={style} onClick={props.onClick}>{props.value}</button>\r\n\r\nexport default Refresh","import React, {useState} from 'react'\r\nimport Board from './board'\r\nimport Message from './message'\r\nimport Refresh from './refresh'\r\n\r\nconst isWon = (board) => {\r\n  // list of postion that is winning\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  // checking each of the postition seeing if the combination is there\r\n  // if it does return the True\r\n  // else return false\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let [a, b, c] = lines[i];\r\n    //console.log(board[a] === board[b] && board[a] === board[c])\r\n    if (board[a] !== \"\" && board[a] === board[b] && board[a] === board[c]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const Game = () => {\r\n  // this is for board\r\n  // default value for all the elemnt is \"\"\r\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\r\n  // first player is \"X\"\r\n  // if the game is over put \"\" as player\r\n  const [isPlayer, setIsPlayer] = useState(\"X\");\r\n  const [message, setMessage] = useState(\"Click to start\");\r\n\r\n  const refresh = () => {\r\n    setBoard(Array(9).fill(\"\"));\r\n    setMessage(\"Click to start\");\r\n    setIsPlayer(\"X\");\r\n  }\r\n\r\n  const handleInput = (pos) => {\r\n    if (isPlayer === \"\" || board[pos] !== \"\") {\r\n      //is the game is over don't play\r\n      // if the box has been clocked already then return\r\n      return;\r\n    }\r\n\r\n    const boardCopy = [...board];\r\n    boardCopy[pos] = isPlayer;\r\n    setBoard(boardCopy); // updating board for current player\r\n\r\n\r\n    if (isWon(boardCopy)) {\r\n      // once game is over\r\n      setMessage(`WON: ${isPlayer}`)\r\n      // since the game is over putting \"\"\r\n      setIsPlayer(\"\");\r\n      return;\r\n    }\r\n\r\n    if (boardCopy.indexOf(\"\") === -1) {\r\n      // if no more moves game is draw\r\n      setMessage(\"DRAW\")\r\n      setIsPlayer(\"\");\r\n    } else {\r\n      let nextPlayer = (isPlayer === \"X\") ? \"O\" : \"X\"\r\n      setIsPlayer(nextPlayer); // updating player\r\n      setMessage(`TURN: ${nextPlayer}`)\r\n    }\r\n  }\r\n\r\n  return (<div>\r\n    <Message value={message}/>\r\n    <Board onClick={handleInput} value={board}/>\r\n    <Refresh onClick={refresh} value={'Refresh'}/>\r\n  </div>)\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from \"./components/game\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}